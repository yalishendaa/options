import streamlit as st
import numpy as np
import plotly.graph_objects as go
import pandas as pd

st.title('Options PnL Calculator')

# –¢–∞–±–ª–∏—Ü–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
strategy_data = pd.DataFrame([
    {
        "–°—Ç—Ä–∞—Ç–µ–≥–∏—è": "Long Call",
        "–û–∂–∏–¥–∞–Ω–∏–µ": "–†–æ—Å—Ç –∞–∫—Ç–∏–≤–∞",
        "–ö–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å": "–•–æ—á–µ—à—å –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ —Ä–æ—Å—Ç–µ, –Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å —Ä–∏—Å–∫ –ø—Ä–µ–º–∏–µ–π",
        "–ú–∞–∫—Å. –ø—Ä–æ—Ñ–∏—Ç": "–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω",
        "–ú–∞–∫—Å. —É–±—ã—Ç–æ–∫": "–ü—Ä–µ–º–∏—è",
        "–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞": "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è, –±–µ–∑ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏"
    },
    {
        "–°—Ç—Ä–∞—Ç–µ–≥–∏—è": "Short Call",
        "–û–∂–∏–¥–∞–Ω–∏–µ": "–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∏–ª–∏ –ø–∞–¥–µ–Ω–∏–µ",
        "–ö–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å": "–û–∂–∏–¥–∞–µ—à—å –±–æ–∫–æ–≤–∏–∫/—Å–Ω–∏–∂–µ–Ω–∏–µ –∏ —Ö–æ—á–µ—à—å –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ –ø—Ä–µ–º–∏–∏",
        "–ú–∞–∫—Å. –ø—Ä–æ—Ñ–∏—Ç": "–ü—Ä–µ–º–∏—è",
        "–ú–∞–∫—Å. —É–±—ã—Ç–æ–∫": "–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω",
        "–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞": "–†–∏—Å–∫–æ–≤–∞–Ω–Ω–∞—è, —Ç—Ä–µ–±—É–µ—Ç –º–∞—Ä–∂–∏"
    },
    {
        "–°—Ç—Ä–∞—Ç–µ–≥–∏—è": "Long Put",
        "–û–∂–∏–¥–∞–Ω–∏–µ": "–ü–∞–¥–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∞",
        "–ö–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å": "–•–æ—á–µ—à—å –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ –ø–∞–¥–µ–Ω–∏–∏ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º —Ä–∏—Å–∫–∞",
        "–ú–∞–∫—Å. –ø—Ä–æ—Ñ–∏—Ç": "–ü–æ—á—Ç–∏ –¥–æ –Ω—É–ª—è",
        "–ú–∞–∫—Å. —É–±—ã—Ç–æ–∫": "–ü—Ä–µ–º–∏—è",
        "–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞": "–•–µ–¥–∂ –∏–ª–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –Ω–∞ –ø–∞–¥–µ–Ω–∏–µ"
    },
    {
        "–°—Ç—Ä–∞—Ç–µ–≥–∏—è": "Short Put",
        "–û–∂–∏–¥–∞–Ω–∏–µ": "–†–æ—Å—Ç –∏–ª–∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å",
        "–ö–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å": "–•–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤ –ø–æ —Å–Ω–∏–∂–µ–Ω–Ω–æ–π —Ü–µ–Ω–µ –∏–ª–∏ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ –ø—Ä–µ–º–∏–∏",
        "–ú–∞–∫—Å. –ø—Ä–æ—Ñ–∏—Ç": "–ü—Ä–µ–º–∏—è",
        "–ú–∞–∫—Å. —É–±—ã—Ç–æ–∫": "–°—Ç—Ä–∞–π–∫ ‚Äì –ø—Ä–µ–º–∏—è (–µ—Å–ª–∏ —Ü–µ–Ω–∞ —É–ø–∞–¥—ë—Ç –¥–æ –Ω—É–ª—è)",
        "–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞": "–ü—Ä–æ–¥–∞–∂–∞ —Ä–∏—Å–∫–∞, —á–∞—Å—Ç–æ –∫–∞–∫ –∑–∞–º–µ–Ω–∞ –ª–∏–º–∏—Ç–Ω–æ–º—É –æ—Ä–¥–µ—Ä—É –Ω–∞ –ø–æ–∫—É–ø–∫—É"
    }
])

with st.expander("–ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"):
    st.dataframe(strategy_data, use_container_width=True)


# –í–≤–æ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–ø—Ü–∏–æ–Ω–∞
option_type = st.selectbox('Option Type', ['Long Call', 'Short Call', 'Long Put', 'Short Put'])
strike_price = st.number_input('Strike Price', value=None)
current_price = st.number_input('Current Price', value=None)
premium = st.number_input('Premium Paid/Received', value=None)
low = min(strike, current_price)
high = max(strike, current_price)

# –ª–æ–≥–∏–∫–∞ –ø–æ —Ç–∏–ø—É –æ–ø—Ü–∏–æ–Ω–∞
if "Call" in option_type:
    price_min = int(low * 0.9)
    price_max = int(high * 1.5)
elif "Put" in option_type:
    price_min = int(low * 0.5)
    price_max = int(high * 1.1)
else:
    price_min = int(low * 0.75)
    price_max = int(high * 1.25)

st.markdown(f"üìâ –î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω—ã: –æ—Ç {price_min} –¥–æ {price_max}")
steps = 500

# –î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω
price_range = np.linspace(price_min, price_max, steps)

# –†–∞—Å—á–µ—Ç PnL
if option_type == 'Long Call':
    payoff = np.maximum(price_range - strike_price, 0)
    pnl = payoff - premium
elif option_type == 'Short Call':
    payoff = np.maximum(price_range - strike_price, 0)
    pnl = premium - payoff
elif option_type == 'Long Put':
    payoff = np.maximum(strike_price - price_range, 0)
    pnl = payoff - premium
elif option_type == 'Short Put':
    payoff = np.maximum(strike_price - price_range, 0)
    pnl = premium - payoff

# –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
fig = go.Figure()
fig.add_trace(go.Scatter(x=price_range, y=pnl, mode='lines', name='P&L'))

fig.add_vline(x=strike_price, line=dict(color='gray', dash='dash'), annotation_text='Strike Price')
fig.add_vline(x=current_price, line=dict(color='green', dash='dash'), annotation_text='Current Price')

fig.update_layout(
    title=f'{option_type} ‚Äì Payoff at Expiry',
    xaxis_title='Underlying Price at Expiry',
    yaxis_title='Profit / Loss',
    template='plotly_dark',
    hovermode='x unified'
)

st.plotly_chart(fig)
