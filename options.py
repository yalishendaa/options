# options_calculator.py
import streamlit as st
import numpy as np
import pandas as pd
import plotly.graph_objects as go
from datetime import date
from scipy.stats import norm
import math

st.set_page_config(page_title="Options PnL Calculator")
st.title('Options PnL Calculator ')

# —Ç–∞–±–ª–∏—Ü–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
strategy_data = pd.DataFrame([
    {"–°—Ç—Ä–∞—Ç–µ–≥–∏—è": "Long Call", "–û–∂–∏–¥–∞–Ω–∏–µ": "–†–æ—Å—Ç –∞–∫—Ç–∏–≤–∞", "–ö–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å": "–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ —Ä–æ—Å—Ç–µ, –Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å —Ä–∏—Å–∫ –ø—Ä–µ–º–∏–µ–π", "–ú–∞–∫—Å. –ø—Ä–æ—Ñ–∏—Ç": "–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω", "–ú–∞–∫—Å. —É–±—ã—Ç–æ–∫": "–ü—Ä–µ–º–∏—è", "–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞": "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è, –±–µ–∑ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏"},
    {"–°—Ç—Ä–∞—Ç–µ–≥–∏—è": "Short Call", "–û–∂–∏–¥–∞–Ω–∏–µ": "–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∏–ª–∏ –ø–∞–¥–µ–Ω–∏–µ", "–ö–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å": "–û–∂–∏–¥–∞–Ω–∏–µ –±–æ–∫–æ–≤–∏–∫–∞/—Å–Ω–∏–∂–µ–Ω–∏—è. –ó–∞—Ä–∞–±–æ—Ç–æ–∫ –Ω–∞ –ø—Ä–µ–º–∏–∏", "–ú–∞–∫—Å. –ø—Ä–æ—Ñ–∏—Ç": "–ü—Ä–µ–º–∏—è", "–ú–∞–∫—Å. —É–±—ã—Ç–æ–∫": "–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω", "–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞": "–†–∏—Å–∫–æ–≤–∞–Ω–Ω–∞—è, —Ç—Ä–µ–±—É–µ—Ç –º–∞—Ä–∂–∏"},
    {"–°—Ç—Ä–∞—Ç–µ–≥–∏—è": "Long Put", "–û–∂–∏–¥–∞–Ω–∏–µ": "–ü–∞–¥–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∞", "–ö–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å": "–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ –ø–∞–¥–µ–Ω–∏–∏ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º —Ä–∏—Å–∫–∞", "–ú–∞–∫—Å. –ø—Ä–æ—Ñ–∏—Ç": "–ü–æ—á—Ç–∏ –¥–æ –Ω—É–ª—è", "–ú–∞–∫—Å. —É–±—ã—Ç–æ–∫": "–ü—Ä–µ–º–∏—è", "–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞": "–•–µ–¥–∂ –∏–ª–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –Ω–∞ –ø–∞–¥–µ–Ω–∏–µ"},
    {"–°—Ç—Ä–∞—Ç–µ–≥–∏—è": "Short Put", "–û–∂–∏–¥–∞–Ω–∏–µ": "–†–æ—Å—Ç –∏–ª–∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å", "–ö–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å": "–ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤ –ø–æ —Å–Ω–∏–∂–µ–Ω–Ω–æ–π —Ü–µ–Ω–µ –∏–ª–∏ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ –ø—Ä–µ–º–∏–∏", "–ú–∞–∫—Å. –ø—Ä–æ—Ñ–∏—Ç": "–ü—Ä–µ–º–∏—è", "–ú–∞–∫—Å. —É–±—ã—Ç–æ–∫": "–°—Ç—Ä–∞–π–∫ ‚Äì –ø—Ä–µ–º–∏—è", "–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞": "–ü—Ä–æ–¥–∞–∂–∞ —Ä–∏—Å–∫–∞, –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ –ª–∏–º–∏—Ç–Ω–æ–º—É –æ—Ä–¥–µ—Ä—É"}
])
with st.expander("üìò –ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"):
    st.dataframe(strategy_data, use_container_width=True)

# –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
option_type = st.selectbox('–¢–∏–ø –æ–ø—Ü–∏–æ–Ω–∞', ['Long Call', 'Short Call', 'Long Put', 'Short Put'])

col1, col2 = st.columns(2)
with col1:
    strike_price = st.number_input('–¶–µ–Ω–∞ —Å—Ç—Ä–∞–π–∫–∞', help='–¶–µ–Ω–∞, –æ—Ç –∫–æ—Ç–æ—Ä–æ–π –æ–ø—Ü–∏–æ–Ω –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–∏–±—ã–ª–∏')
with col2:
    current_price = st.number_input('–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞')

col3, col4 = st.columns(2)
with col3:
    if option_type.startswith('Long'):
        premium_label = '–û–ø–ª–∞—á–µ–Ω–Ω–∞—è –ø—Ä–µ–º–∏—è (–æ–ø–ª–∞—Ç–∞ –∞–≤–∞–Ω—Å–æ–º)'
    else:
        premium_label = '–ü–æ–ª—É—á–µ–Ω–Ω–∞—è –ø—Ä–µ–º–∏—è (–∑–∞—Ä–∞–±–æ—Ç–æ–∫ –∞–≤–∞–Ω—Å–æ–º)'
    premium = st.number_input(premium_label, help='–ü—Ä–µ–º–∏—è ‚Äî —ç—Ç–æ —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–ø—Ü–∏–æ–Ω–∞. –û–ø–ª–∞—Ç–∞ –µ—Å–ª–∏ long, –ø–æ–ª—É—á–∞–µ—Ç–µ –≤ short')

with col4:
    iv = st.slider('Implied Volatility (IV %)', 1, 300, 80, help='–û–∂–∏–¥–∞–µ–º–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å') / 100


with st.expander("–ß—Ç–æ —Ç–∞–∫–æ–µ Implied Volatility (IV)?"):
    st.markdown("""
–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å IV
‚Äì IV –≤–ª–∏—è–µ—Ç –Ω–∞ —Ç–æ, —Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –æ–ø—Ü–∏–æ–Ω –¥–æ —ç–∫—Å–ø–∏—Ä–∞—Ü–∏–∏
‚Äì —á–µ–º –≤—ã—à–µ IV ‚Äî —Ç–µ–º –¥–æ—Ä–æ–∂–µ –æ–ø—Ü–∏–æ–Ω, –ø–æ—Ç–æ–º—É —á—Ç–æ –±–æ–ª—å—à–µ —à–∞–Ω—Å–æ–≤, —á—Ç–æ –æ–Ω ‚Äú—Å—ã–≥—Ä–∞–µ—Ç‚Äù  
‚Äì –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞: –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–º IV –ª–∏–Ω–∏—è "PnL today" –±—É–¥–µ—Ç –≤—ã—à–µ, –ø—Ä–∏ –Ω–∏–∑–∫–æ–º ‚Äî –±–ª–∏–∂–µ –∫ "PnL at expiry"

---

–û—Ç–∫—É–¥–∞ –≤–∑—è—Ç—å IV
1. –ù–∞ –±–∏—Ä–∂–∞—Ö
   ‚Äì –Ω–∞ CEX —Ç–∏–ø–∞ Bybit, Deribit –µ—Å—Ç—å IV –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—Ç—Ä–∞–π–∫–∞  
   ‚Äì –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –≤–∑—è—Ç—å —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ 

2. –ï—Å–ª–∏ IV –Ω–µ—Ç ‚Äì –æ—Ä–∏–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–æ:
   ‚Äì BTC/ETH: ~50‚Äì80% –≤ —Å–ø–æ–∫–æ–π–Ω–æ–º —Ä—ã–Ω–∫–µ, ~100‚Äì150% –≤ –Ω–æ–≤–æ—Å—Ç—è—Ö  
   ‚Äì –∞–ª—å—Ç–∫–æ–π–Ω—ã: —á–∞—Å—Ç–æ 150‚Äì200%  
   ‚Äì meme/low cap: –º–æ–∂–Ω–æ —Å–º–µ–ª–æ —Å—Ç–∞–≤–∏—Ç—å 200‚Äì300%+

""")

col5, col6 = st.columns(2)

with col5:
    expiry_date = st.date_input('–î–∞—Ç–∞ —ç–∫—Å–ø–∏—Ä–∞—Ü–∏–∏', value=date.today(), help='–î–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è –æ–ø—Ü–∏–æ–Ω–∞')
with col6:
    today = st.date_input('–°–µ–≥–æ–¥–Ω—è—à–Ω—è—è —Ü–µ–Ω–∞', value=date.today())

# —Ä–∞—Å—á—ë—Ç –ø–æ –Ω–∞–∂–∞—Ç–∏—é
if st.button("üßÆ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å PnL"):
    days_to_expiry = max((expiry_date - today).days, 0)
    T = days_to_expiry / 365
    r = 0.0

    # –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω
    low = min(strike_price, current_price)
    high = max(strike_price, current_price)
    price_min = int(low * 0.5) if "Put" in option_type else int(low * 0.9)
    price_max = int(high * 1.1) if "Put" in option_type else int(high * 1.5)
    price_range = np.linspace(price_min, price_max, 500)

    def black_scholes_price(S, K, T, r, sigma, option_type='call'):
        if T == 0:
            return max(0.0, S - K) if option_type == 'call' else max(0.0, K - S)
        d1 = (math.log(S / K) + (r + 0.5 * sigma**2) * T) / (sigma * math.sqrt(T))
        d2 = d1 - sigma * math.sqrt(T)
        if option_type == 'call':
            return S * norm.cdf(d1) - K * math.exp(-r * T) * norm.cdf(d2)
        else:
            return K * math.exp(-r * T) * norm.cdf(-d2) - S * norm.cdf(-d1)

    pnl_today = []
    pnl_expiry = []

    for price in price_range:
        opt_type = 'call' if 'Call' in option_type else 'put'
        theo = black_scholes_price(price, strike_price, T, r, iv, opt_type)
        if option_type.startswith('Long'):
            pnl_t = theo - premium
        else:
            pnl_t = premium - theo
        pnl_today.append(pnl_t)

        payoff = max(price - strike_price, 0) if 'Call' in option_type else max(strike_price - price, 0)
        pnl_e = payoff - premium if option_type.startswith('Long') else premium - payoff
        pnl_expiry.append(pnl_e)

    # –≥—Ä–∞—Ñ–∏–∫
    fig = go.Figure()
    fig.add_trace(go.Scatter(x=price_range, y=pnl_today, mode='lines', name='PnL Today'))
    fig.add_trace(go.Scatter(x=price_range, y=pnl_expiry, mode='lines', name='PnL at Expiry', line=dict(dash='dot')))
    fig.add_vline(x=strike_price, line=dict(color='gray', dash='dash'), annotation_text='Strike')
    fig.add_vline(x=current_price, line=dict(color='green', dash='dash'), annotation_text='Current Price')

    fig.update_layout(
        title=f'{option_type} ‚Äì PnL Curve',
        xaxis_title='Underlying Price',
        yaxis_title='Profit / Loss',
        template='plotly_dark',
        hovermode='x unified'
    )

        # –¶–≤–µ—Ç–æ–≤—ã–µ –∑–æ–Ω—ã
    break_even = strike_price + premium if 'Call' in option_type else strike_price - premium

    if 'Call' in option_type:
        fig.add_vrect(
            x0=break_even,
            x1=price_max,
            fillcolor="green",
            opacity=0.1,
            line_width=0,
            annotation_text="Profit Zone",
            annotation_position="top left"
        )
        fig.add_vrect(
            x0=strike_price - premium,
            x1=break_even,
            fillcolor="yellow",
            opacity=0.1,
            line_width=0,
            annotation_text="Breakeven Zone",
            annotation_position="top left"
        )
        fig.add_vrect(
            x0=price_min,
            x1=strike_price - premium,
            fillcolor="red",
            opacity=0.1,
            line_width=0,
            annotation_text="Loss Zone",
            annotation_position="top left"
        )
    else:
        fig.add_vrect(
            x0=price_min,
            x1=break_even,
            fillcolor="green",
            opacity=0.1,
            line_width=0,
            annotation_text="Profit Zone",
            annotation_position="top left"
        )
        fig.add_vrect(
            x0=break_even,
            x1=strike_price + premium,
            fillcolor="yellow",
            opacity=0.1,
            line_width=0,
            annotation_text="Breakeven Zone",
            annotation_position="top left"
        )
        fig.add_vrect(
            x0=strike_price + premium,
            x1=price_max,
            fillcolor="red",
            opacity=0.1,
            line_width=0,
            annotation_text="Loss Zone",
            annotation_position="top left"
        )

    st.plotly_chart(fig, use_container_width=True)
